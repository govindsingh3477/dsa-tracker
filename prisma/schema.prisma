// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum Role {
  USER
  ADMIN
}
enum Difficulty {
  EASY
  MEDIUM
  HARD
}
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  role             Role       @default(USER) 
  streak           Int        @default(0)    // Streak count
  problemsSolved   Int        @default(0)    // Total number of problems solved
  lastCompletedDate DateTime?         
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  solvedHistory    SolvedHistory[]
  accounts      Account[]
  sessions      Session[]
  problems      Problem[]
  score         Int    @default(0)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Problem {
  id           String     @id @default(cuid())
  title        String     // Problem title
  description  String?    // Optional problem description
  difficulty   Difficulty // Enum: EASY, MEDIUM, HARD
  link         String     // Link to the external problem
  platformName String     // Name of the platform (e.g., LeetCode, Codeforces)
  creatorId    String    // ID of the admin who added the problem
  creator      User      @relation(fields: [creatorId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  solvedBy     SolvedHistory[]
}

model SolvedHistory {
  id         String   @id @default(cuid())
  userId     String   // User who solved the problem
  problemId  String   // Problem solved
  solvedAt   DateTime @default(now()) // Date when the problem was solved
  user       User     @relation(fields: [userId], references: [id])
  problem    Problem  @relation(fields: [problemId], references: [id])
  @@unique([userId, problemId]) 
}
